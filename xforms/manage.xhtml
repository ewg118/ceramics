<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:void="http://rdfs.org/ns/void#"
	xmlns:dcterms="http://purl.org/dc/terms/" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/" xmlns:kon="http://kerameikos.org/ontology#"
	xmlns:res="http://www.w3.org/2005/sparql-results#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
	<head>
		<title>Kerameikos: Manage Datasets</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
		<script type="text/javascript" src="http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="/apps/kerameikos/xforms/css/style.css" />

		<xforms:model>
			<!-- ***** RDF templates ***** -->
			<xforms:instance id="rdf" xxforms:exclude-result-prefixes="#default xhtml xforms xs ev xxforms fr res xi kerameikos">
				<rdf:RDF xmlns="" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:void="http://rdfs.org/ns/void#"
					xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/"
					xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:dcterms="http://purl.org/dc/terms/"
					xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:kid="http://kerameikos.org/id/"
					xmlns:kon="http://kerameikos.org/ontology#"/>
			</xforms:instance>

			<xforms:instance id="void-rdf" xxforms:exclude-result-prefixes="#default xhtml xforms xs ev xxforms fr res xi kerameikos">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:void="http://rdfs.org/ns/void#" xmlns:foaf="http://xmlns.com/foaf/0.1/"
					xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/"
					xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:dcterms="http://purl.org/dc/terms/"
					xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:kid="http://kerameikos.org/id/"
					xmlns:kon="http://kerameikos.org/ontology#">
					<void:Dataset rdf:about="https://discovernewfields.org/">
						<dcterms:title xml:lang="en"/>
						<dcterms:description xml:lang="en"/>
						<dcterms:publisher/>
						<dcterms:license rdf:resource=""/>
						<void:dataDump rdf:resource="http://kerameikos.org/rdf/test-import.json"/>
					</void:Dataset>
				</rdf:RDF>
			</xforms:instance>

			<!-- RDF templates for harvesting -->
			<xforms:instance id="object" xxforms:exclude-result-prefixes="#all">
				<crm:E22_Man-Made_Object rdf:about=""> </crm:E22_Man-Made_Object>
			</xforms:instance>

			<xforms:instance id="accession-template" xxforms:exclude-result-prefixes="#all">
				<crm:P1_is_identified_by>
					<crm:E42_Identifier>
						<crm:P190_has_symbolic_content/>
						<crm:P2_has_type rdf:resource="http://vocab.getty.edu/aat/300312355"/>
					</crm:E42_Identifier>
				</crm:P1_is_identified_by>
			</xforms:instance>

			<xforms:instance id="title-template" xxforms:exclude-result-prefixes="#all">
				<crm:P1_is_identified_by>
					<crm:E33_E41_Linguistic_Appellation>
						<crm:P190_has_symbolic_content/>
						<crm:P2_has_type rdf:resource="http://vocab.getty.edu/aat/300404670"/>
					</crm:E33_E41_Linguistic_Appellation>
				</crm:P1_is_identified_by>
			</xforms:instance>

			<xforms:instance id="production-template" xxforms:exclude-result-prefixes="#all">
				<crm:P108i_was_produced_by>
					<crm:E12_Production/>
				</crm:P108i_was_produced_by>
			</xforms:instance>

			<xforms:instance id="timespan-template" xxforms:exclude-result-prefixes="#all">
				<crm:P4_has_time-span>
					<crm:E52_Time-Span>
						<crm:P82a_begin_of_the_begin rdf:datatype="http://www.w3.org/2001/XMLSchema#gYear"/>
						<crm:P82b_end_of_the_end rdf:datatype="http://www.w3.org/2001/XMLSchema#gYear"/>
					</crm:E52_Time-Span>
				</crm:P4_has_time-span>
			</xforms:instance>

			<xforms:instance id="dimension-template" xxforms:exclude-result-prefixes="#all">
				<crm:P43_has_dimension>
					<crm:E54_Dimension>
						<crm:P2_has_type rdf:resource=""/>
						<crm:P90_has_value rdf:datatype="http://www.w3.org/2001/XMLSchema#decimal"/>
						<crm:P91_has_unit rdf:resource="http://vocab.getty.edu/aat/300379098"/>
					</crm:E54_Dimension>
				</crm:P43_has_dimension>
			</xforms:instance>

			<xforms:instance id="representation-template" xxforms:exclude-result-prefixes="#all">
				<crm:P138i_has_representation>
					<crm:E36_Visual_Item rdf:about=""/>
				</crm:P138i_has_representation>
			</xforms:instance>

			<xforms:instance id="manifest-template" xxforms:exclude-result-prefixes="#all">
				<crm:P129i_is_subject_of>
					<crm:E73_Information_Object rdf:about=""/>
					<dcterms:format>application/ld+json;profile="http://iiif.io/api/presentation/2/context.json"</dcterms:format>
					<dcterms:conformsTo rdf:resource="http://iiif.io/api/presentation"/>
				</crm:P129i_is_subject_of>
			</xforms:instance>

			<!-- Concordance URIs -->
			<xforms:instance id="mappings" xxforms:exclude-result-prefixes="#all">
				<mappings xmlns=""></mappings>
			</xforms:instance>

			<!-- Linked Art JSON-LD instance -->
			<xforms:instance id="json" xxforms:exclude-result-prefixes="#all">
				<json></json>
			</xforms:instance>

			<!-- config and controls -->
			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../config.xml"/>
			</xforms:instance>

			<xforms:instance id="control-instance">
				<controls xmlns="">
					<status></status>
					<void_uri></void_uri>
					<dump_uri></dump_uri>
					<dataset></dataset>
					<validate-trigger>false</validate-trigger>
					<import-json-trigger>false</import-json-trigger>
				</controls>
			</xforms:instance>			
			
			<xforms:instance id="languages">
				<xi:include href="instances/languages.xml"/>
			</xforms:instance>
			
			<xforms:instance id="rights">
				<xi:include href="instances/rights.xml"/>
			</xforms:instance>
			
			<xforms:instance id="licenses">
				<xi:include href="instances/licenses.xml"/>
			</xforms:instance>

			<!-- SPARQL instances -->
			<xforms:instance id="sparqlQuery">
				<query></query>
			</xforms:instance>

			<!-- preloaded instances -->
			<xforms:instance id="sparqlResponse">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<!-- sparql update -->
			<xforms:instance id="sparqlUpdate-template">
				<templates xmlns="">
					<query id="delete-metadata">
						<![CDATA[PREFIX void:	<http://rdfs.org/ns/void#> 
DELETE {?s ?p ?o} WHERE { <DATASET> ?p ?o . ?s ?p ?o . FILTER (?s = <DATASET>)}]]>
					</query>
					<query id="delete-dump">
						<![CDATA[PREFIX crm:	<http://www.cidoc-crm.org/cidoc-crm/>
PREFIX void:	<http://rdfs.org/ns/void#>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX svcs:	<http://rdfs.org/sioc/services#>
DELETE {?s ?p ?o} WHERE { 
{ ?object void:inDataset <DATASET> ;
  crm:P108i_was_produced_by ?prod .
  ?prod crm:P4_has_time-span ?s . ?s ?p ?o }
UNION { ?object void:inDataset <DATASET> ;
  crm:P108i_was_produced_by|crm:P1_is_identified_by|crm:P43_has_dimension|crm:P138i_has_representation|crm:P129i_is_subject_of ?s . ?s ?p ?o }
UNION { ?s void:inDataset <DATASET> . ?s ?p ?o}
}]]>
					</query>
				</templates>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate">
				<query></query>
			</xforms:instance>

			<!-- sparql query templates -->
			<xforms:instance id="sparql-templates">
				<templates xmlns="">
					<query id="get-datasets"><![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX void:	<http://rdfs.org/ns/void#>
CONSTRUCT {?uri rdf:type void:Dataset ; dcterms:publisher ?publisher; dcterms:title ?title ; void:dataDump ?dump}
WHERE {?uri a void:Dataset ; 
  dcterms:publisher ?publisher ; 
  void:dataDump ?dump; 
  dcterms:title ?title FILTER (lang(?title) = "" || langMatches(lang(?title), "en")) }
ORDER BY ASC(?publisher) ASC(?title)]]></query>
					<query id="get-match"><![CDATA[PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
SELECT ?uri ?type WHERE {
  ?uri skos:exactMatch <%MATCH%> ;
       rdf:type ?type FILTER (?type != skos:Concept)
}]]></query>
				</templates>
			</xforms:instance>

			<!-- store the void:Datasets in their own instance to free up the SPARQL response for other data harvesting and validation -->
			<xforms:instance id="datasets">
				<rdf:RDF/>
			</xforms:instance>

			<!-- ************* BINDINGS **********************-->
			<xforms:bind nodeset="instance('void-rdf')">
				<xforms:bind nodeset="void:Dataset">
					<xforms:bind nodeset="rdf:about" required="true()" type="xs:anyURI" constraint="matches(., 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$')"/>
					<xforms:bind nodeset="dcterms:title" required="true()"/>
					<xforms:bind nodeset="dcterms:description"
						constraint="if (not(@rdf:resource)) then string-length(normalize-space(.)) &gt; 0 else string-length(normalize-space(.)) = 0"/>
					<xforms:bind nodeset="dcterms:publisher"
						constraint="if (not(@rdf:resource)) then string-length(normalize-space(.)) &gt; 0 else string-length(normalize-space(.)) = 0"/>
					<xforms:bind nodeset="dcterms:license"
						constraint="if (not(@rdf:resource)) then string-length(normalize-space(.)) &gt; 0 else string-length(normalize-space(.)) = 0"/>
					<xforms:bind nodeset="//@rdf:resource" type="xs:anyURI" required="true()" constraint="matches(., 'https?://(-\.)?([^\s/?\.#-]+\.?)+(/[^\s]*)?$')"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind id="validate-trigger" nodeset="validate-trigger" type="xs:boolean" readonly=". != true()"/>
			</xforms:bind>

			<!-- ************* SPARQL SUBMISSIONS **********************-->
			<xforms:submission id="submit-sparqlQuery" action="{instance('config')/sparql/query}?query={encode-for-uri(instance('sparqlQuery'))}&amp;output=xml"
				ref="instance('sparqlResponse')" replace="instance" method="get">
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL query failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="delete-graph" action="{instance('config')/sparql/update}" ref="instance('sparqlUpdate')" serialization="text/plain"
				replace="none" method="post" mediatype="application/sparql-update">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Graph successfully deleted from
					endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL update failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="post-void" action="{instance('config')/sparql/store}?default" ref="instance('void-rdf')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Successfully posted to endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to post VoID metadata.</xforms:message>
			</xforms:submission>

			<xforms:submission id="post-dump" action="{instance('config')/sparql/store}?default" ref="instance('rdf')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Successfully posted to endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to post data dump.</xforms:message>
			</xforms:submission>

			<!-- ************************* LOAD RDF/XML ************************** -->
			<xforms:submission id="load-void" serialization="none" method="get" action="{instance('control-instance')/void_uri}" replace="instance"
				instance="void-rdf">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Unable to load VoID metadata RDF.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="load-dump" serialization="none" method="get" action="{instance('control-instance')/dump_uri}" replace="instance"
				instance="rdf">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Unable to load VoID dump.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- ************************* LOAD LINKED ART JSON-LD ************************** -->
			<xforms:submission id="load-json" serialization="none" method="get" action="{instance('void-rdf')/void:Dataset/void:dataDump/@rdf:resource}"
				replace="instance" instance="json">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Unable to load JSON-LD. Either it is not JSON or the URL is incorrect.</xforms:message>
				</xforms:action>
				
				<!-- iterate through each JSON Human-Made-Object at the level of each API call -->
				<xforms:action ev:event="xforms-submit-done">
					<!-- extract all possible URIs and execute SPARQL queries to get their Kerameikos.org exactMatch, if applicable -->
					<xforms:action
						xxforms:iterate="distinct-values(instance('json')/produced_by/carried_out_by/_/id|instance('json')/produced_by/took_place_at/_/id|instance('json')/made_of/_/id|instance('json')/technique/_/id|instance('json')/classified_as/_/id|instance('json')/current_owner/id|instance('json')//style/_/id)">
						<xforms:var name="uri" select="normalize-space(data(context()))"/>
						
						<!-- perform lookup only if the URI hasn't already been mapped (applicable for eventual API pagination) -->
						<xforms:action if="not(instance('mappings')/mapping[@from = $uri]/@to)">
							<!-- set the SPARQL query-->
							<xforms:setvalue ref="instance('sparqlQuery')"
								value="replace(instance('sparql-templates')/query[@id='get-match'], '%MATCH%', $uri)"/>
							<xforms:send submission="submit-sparqlQuery"/>
							
							<!-- if there's a response, then insert the corresponding Kerameikos URI and class -->
							<xforms:action if="instance('sparqlResponse')//res:result">
								<xforms:insert context="instance('mappings')" nodeset="./child::node()[last()]"
									origin="xforms:element('mapping', (xforms:attribute('from', $uri), xforms:attribute('to', instance('sparqlResponse')//res:binding[@name='uri']/res:uri), xforms:attribute('type', instance('sparqlResponse')//res:binding[@name='type']/res:uri)))"
								/>
							</xforms:action>
							<!-- otherwise insert a mapping @from without a @to to prevent further HTTP requests -->
							<xforms:action if="not(instance('sparqlResponse')//res:result)">
								<xforms:insert context="instance('mappings')" nodeset="./child::node()[last()]"
									origin="xforms:element('mapping', (xforms:attribute('from', $uri)))"/>
							</xforms:action>
						</xforms:action>
					</xforms:action>
					
					<!-- interate through all HMOs in the JSON-LD response -->
					<xforms:action xxforms:iterate="instance('json')/descendant-or-self::node()[type='HumanMadeObject']">
						<!-- use the home page link when available, otherwise use the URI for the HMO -->
						<xforms:var name="objectURI"
							select="if (context()/subject_of/_[classified_as/_/id = 'http://vocab.getty.edu/aat/300266277'])
							then context()/subject_of/_[classified_as/_/id = 'http://vocab.getty.edu/aat/300266277']/id else context()/id"/>
						
						<xforms:setvalue ref="instance('object')/@rdf:about" value="$objectURI"/>
						
						<!-- Identifiers: Title and Accession number -->
						<xforms:action xxforms:iterate="context()/identified_by/_">
							<xforms:var name="content" select="context()/content"/>
							
							<xforms:action if="context()/classified_as/_/id = 'http://vocab.getty.edu/aat/300404670'">
								<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
									origin="instance('title-template')"/>
								<xforms:setvalue
									ref="instance('object')/crm:P1_is_identified_by[last()]/crm:E33_E41_Linguistic_Appellation/crm:P190_has_symbolic_content"
									value="$content"/>
							</xforms:action>
							<xforms:action if="context()/classified_as/_/id = 'http://vocab.getty.edu/aat/300312355'">
								<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
									origin="instance('accession-template')"/>
								<xforms:setvalue
									ref="instance('object')/crm:P1_is_identified_by[last()]/crm:E42_Identifier/crm:P190_has_symbolic_content"
									value="$content"/>
							</xforms:action>
						</xforms:action>
						
						<!-- iterate through types in order to parse the shape -->
						<xforms:action xxforms:iterate="context()/classified_as/_[@type='object']">
							<xforms:var name="uri" select="context()/id"/>
							
							<xforms:action
								if="instance('mappings')/mapping[@from = $uri]/@type = 'http://kerameikos.org/ontology#Shape'">
								<xforms:var name="match" select="instance('mappings')/mapping[@from = $uri]/@to"/>
								
								<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
									origin="xforms:element('kon:hasShape', (xforms:attribute('rdf:resource', $match)))"/>
							</xforms:action>
						</xforms:action>
						
						<!-- iterate through visual item depictions to parse out styles -->
						<xforms:action xxforms:iterate="context()/shows/_[child::style]/style//id">
							<xforms:var name="uri" select="data(context())"/>
							
							<xforms:var name="match"
								select="if (instance('mappings')/mapping[@from = $uri]/@to) then instance('mappings')/mapping[@from = $uri]/@to else $uri"/>
							
							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="xforms:element('kon:hasStyle', (xforms:attribute('rdf:resource', $match)))"/>
						</xforms:action>
						
						<!-- create material and technique properties -->
						<xforms:action xxforms:iterate="context()/made_of/_|context()/technique/_">
							<xforms:var name="uri" select="context()/id"/>
							<xforms:var name="element"
								select="if (ancestor::node()/name() = 'made_of') then 'crm:P45_consists_of' else 'crm:P32_used_general_technique'"/>
							<xforms:var name="match"
								select="if (instance('mappings')/mapping[@from = $uri]/@to) then instance('mappings')/mapping[@from = $uri]/@to else $uri"/>
							
							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="xforms:element($element, (xforms:attribute('rdf:resource', $match)))"/>
						</xforms:action>
						
						<!-- begin processing production event, if applicable -->
						<xforms:action if="context()/produced_by">
							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="instance('production-template')"/>
							
							<!-- iterate through all production properties -->
							<xforms:action xxforms:iterate="context()/produced_by/*">
								<xforms:var name="property" select="context()/name()"/>
								
								<xforms:action if="$property = 'carried_out_by'">
									<xforms:action xxforms:iterate="context()/_">
										<xforms:var name="uri" select="context()/id"/>
										<xforms:var name="match"
											select="if (instance('mappings')/mapping[@from = $uri]/@to) then instance('mappings')/mapping[@from = $uri]/@to else $uri"/>
										
										<xforms:insert context="instance('object')/crm:P108i_was_produced_by/crm:E12_Production"
											nodeset="./child::node()[last()]"
											origin="xforms:element('crm:P14_carried_out_by', (xforms:attribute('rdf:resource', $match)))"
										/>
									</xforms:action>
								</xforms:action>
								<xforms:action if="$property = 'took_place_at'">
									<xforms:action xxforms:iterate="context()/_">
										<xforms:var name="uri" select="context()/id"/>
										<xforms:var name="match"
											select="if (instance('mappings')/mapping[@from = $uri]/@to) then instance('mappings')/mapping[@from = $uri]/@to else $uri"/>
										
										<xforms:insert context="instance('object')/crm:P108i_was_produced_by/crm:E12_Production"
											nodeset="./child::node()[last()]"
											origin="xforms:element('crm:P7_took_place_at', (xforms:attribute('rdf:resource', $match)))"
										/>
									</xforms:action>
								</xforms:action>
								<xforms:action if="$property = 'timespan'">
									<!-- only process timespan if there's a start and end, and they conform to xsd:dateTime -->
									
									<xforms:action
										if="context()/begin_of_the_begin castable as xs:dateTime and context()/end_of_the_end castable as xs:dateTime">
										<!-- convert to xsd:gYear -->
										<xforms:var name="begin"
											select="if (starts-with(context()/begin_of_the_begin, '-')) then substring(context()/begin_of_the_begin, 1, 5) else substring(context()/begin_of_the_begin, 1, 4)"/>
										<xforms:var name="end"
											select="if (starts-with(context()/end_of_the_end, '-')) then substring(context()/end_of_the_end, 1, 5) else substring(context()/end_of_the_end, 1, 4)"/>
										
										<xforms:insert context="instance('object')/crm:P108i_was_produced_by/crm:E12_Production"
											nodeset="./child::node()[last()]" origin="instance('timespan-template')"/>
										
										<xforms:setvalue ref="instance('object')/crm:P108i_was_produced_by//crm:P82a_begin_of_the_begin"
											value="if (number($begin) &lt; 0) then format-number(number($begin) - 1, '0000') else $begin"/>
										<xforms:setvalue ref="instance('object')/crm:P108i_was_produced_by//crm:P82b_end_of_the_end"
											value="if (number($end) &lt; 0) then format-number(number($end) - 1, '0000') else $end"/>
									</xforms:action>
								</xforms:action>
							</xforms:action>
						</xforms:action>
						
						<!-- insert and convert dimensions to metric -->
						<xforms:action if="count(context()/dimension/_) &gt; 0">
							<xforms:action xxforms:iterate="context()/dimension/_">
								
								<!-- ensure that the value is numeric -->
								<xforms:action if="context()/value castable as xs:decimal">
									<xforms:var name="units" select="context()/unit/id"/>
									<xforms:var name="val" select="number(context()/value)"/>
									
									<!-- insert the dimension template, but only if the units conform to AAT -->
									<xforms:action if="matches($units, 'https?://vocab.getty.edu/aat/\d+')">
										<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
											origin="instance('dimension-template')"/>
										
										<!-- set the dimension type -->
										<xforms:setvalue
											ref="instance('object')/crm:P43_has_dimension[last()]/crm:E54_Dimension/crm:P2_has_type/@rdf:resource"
											value="context()/classified_as/_[1]/id"/>
										
										<!-- perform some math to convert inches to centimeters, if applicable -->
										<xforms:action if="$units = 'http://vocab.getty.edu/aat/300379100'">
											<!-- inches -->
											<xforms:setvalue
												ref="instance('object')/crm:P43_has_dimension[last()]/crm:E54_Dimension/crm:P90_has_value"
												value="format-number($val * 2.54, '###.##')"/>
										</xforms:action>
										<xforms:action if="$units = 'http://vocab.getty.edu/aat/300379098'">
											<!-- cm -->
											<xforms:setvalue
												ref="instance('object')/crm:P43_has_dimension[last()]/crm:E54_Dimension/crm:P90_has_value"
												value="$val"/>
										</xforms:action>
									</xforms:action>
								</xforms:action>
							</xforms:action>
						</xforms:action>
						
						<!-- digital images -->
						<xforms:action xxforms:iterate="context()/representation/_">
							<xforms:var name="binding" select="context()" as="node()?"/>
							
							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="instance('representation-template')"/>
							<xforms:setvalue
								ref="instance('object')/crm:P138i_has_representation[last()]/crm:E36_Visual_Item/@rdf:about"
								value="$binding/id"/>
							
							<!-- insert label, if applicable -->
							<xforms:insert context="instance('object')/crm:P138i_has_representation[last()]/crm:E36_Visual_Item"
								nodeset="./child::node()[last()]" origin="xforms:element('rdfs:label', data($binding/_label))"
								if="string(data($binding/_label))"/>
							
							<!-- evaluate classified_as or conforms_to as image or IIIF -->
							<xforms:insert context="instance('object')/crm:P138i_has_representation[last()]/crm:E36_Visual_Item"
								nodeset="./child::node()[last()]"
								origin="xforms:element('dcterms:conformsTo', (xforms:attribute('rdf:resource', 'http://iiif.io/api/image')))"
								if="$binding/conforms_to"/>
							<xforms:insert context="instance('object')/crm:P138i_has_representation[last()]/crm:E36_Visual_Item"
								nodeset="./child::node()[last()]" origin="xforms:element('dcterms:format', 'image/jpeg')"
								if="$binding/classified_as"/>
						</xforms:action>
						
						<!-- if there's a IIIF Manifest link -->
						<xforms:action if="context()/subject_of/_[conforms_to/_/id = 'http://iiif.io/api/presentation']">
							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="instance('manifest-template')"/>
							<xforms:setvalue
								ref="instance('object')/crm:P129i_is_subject_of[last()]/crm:E73_Information_Object/@rdf:about"
								value="context()/subject_of/_[conforms_to/_/id = 'http://iiif.io/api/presentation']/id"/>
						</xforms:action>
						
						<!-- insert collection link -->
						<xforms:action if="context()/current_owner">
							<xforms:var name="uri" select="context()/current_owner/id"/>
							<xforms:var name="match"
								select="if (instance('mappings')/mapping[@from = $uri]/@to) then instance('mappings')/mapping[@from = $uri]/@to else $uri"/>
							
							<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
								origin="xforms:element('crm:P50_has_current_keeper', (xforms:attribute('rdf:resource', $match)))"/>
						</xforms:action>
						
						<!-- insert void:inDataset -->
						<xforms:insert context="instance('object')" nodeset="./child::node()[last()]"
							origin="xforms:element('void:inDataset', (xforms:attribute('rdf:resource', data(instance('void-rdf')/void:Dataset/@rdf:about))))"/>
						
						<!-- insert HMO template into primary RDF instance after processing -->
						<xforms:insert context="instance('rdf')" nodeset="child::node()[last()]" origin="instance('object')"/>
						
						<!-- clear template after completion -->
						<xforms:delete nodeset="instance('object')/*"/>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<!-- ********** XFORMS-MODEL-CONSTRUCT-DONE ********** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
				<xforms:send submission="submit-sparqlQuery"/>
				<xforms:delete nodeset="instance('datasets')/*"/>
				<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
			</xforms:action>
		</xforms:model>
	</head>

	<body>
		<xforms:var name="display_path">../</xforms:var>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-3 pull-right text-right">
					<h4>
						<a href="logout"><span class="glyphicon glyphicon-log-out"></span> logout</a>
					</h4>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<p><a href="../"><span class="glyphicon glyphicon-arrow-left"></span>Return to Admin</a></p>
					<xforms:group ref=".[string-length(instance('control-instance')/status) &gt; 0]">
						<div class="alert alert-success alert-box">
							<span class="glyphicon glyphicon-info-sign"></span>
							<strong>Status:</strong>
							<xforms:output ref="instance('control-instance')/status"/>
						</div>
					</xforms:group>
					<h1>Manage Datasets</h1>
					<div>
						<xforms:trigger appearance="minimal">
							<xforms:label><span class="glyphicon glyphicon-plus"></span>Add dataset via RDF/XML VoID</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:setvalue ref="instance('control-instance')/void_uri"/>
								<xxforms:show dialog="lookup-dialog"/>
							</xforms:action>
						</xforms:trigger>
						<xforms:trigger appearance="minimal">
							<xforms:label><span class="glyphicon glyphicon-plus"></span>Harvest Linked Art JSON-LD</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:toggle case="harvest-json"/>
							</xforms:action>
						</xforms:trigger>
					</div>
					<xforms:switch>
						<xforms:case id="default">
							<xforms:group ref="instance('datasets')">
								<xforms:group ref=".[count(void:Dataset) &gt; 0]">
									<table class="table">
										<thead>
											<tr>
												<th>Dataset</th>
												<th>Publisher</th>
												<th>Refresh</th>
												<th>Delete</th>
											</tr>
										</thead>
										<tbody>
											<xforms:repeat nodeset="descendant::void:Dataset">
												<tr>
													<td>
														<xforms:trigger appearance="minimal">
															<xforms:label value="dcterms:title"/>
															<xforms:action ev:event="DOMActivate">
																<xforms:load show="new" resource="{@rdf:about}"/>
															</xforms:action>
														</xforms:trigger>
													</td>
													<td><xforms:output ref="dcterms:publisher"/></td>
													<td class="text-center">
														<xforms:trigger appearance="minimal">
															<xforms:label><span class="glyphicon glyphicon-refresh"></span></xforms:label>
															<xforms:action ev:event="DOMActivate">
																<xforms:var name="dataset" select="@rdf:about"/>
																<xforms:setvalue ref="instance('control-instance')/dataset" value="$dataset"/>
																<xforms:dispatch target="refresh-dataset-dialog" name="fr-show"/>
															</xforms:action>
														</xforms:trigger>
													</td>
													<td class="text-center">
														<xforms:trigger appearance="minimal">
															<xforms:label><span class="glyphicon glyphicon-remove"></span></xforms:label>
															<xforms:action ev:event="DOMActivate">
																<xforms:var name="dataset" select="@rdf:about"/>
																<xforms:setvalue ref="instance('control-instance')/dataset" value="$dataset"/>
																<xforms:dispatch target="delete-dataset-dialog" name="fr-show"/>
															</xforms:action>
														</xforms:trigger>
													</td>
												</tr>
											</xforms:repeat>
										</tbody>
									</table>
								</xforms:group>
								<xforms:group ref=".[count(void:Dataset) = 0]">
									<p>No datasets found in endpoint. <xforms:trigger appearance="minimal">
											<xforms:label>Add a dataset.</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<xforms:setvalue ref="instance('control-instance')/void_uri"/>
												<xxforms:show dialog="lookup-dialog"/>
											</xforms:action>
										</xforms:trigger></p>
								</xforms:group>
							</xforms:group>
						</xforms:case>
						<xforms:case id="harvest-json">
							<xforms:group ref="instance('void-rdf')/void:Dataset">
								<xforms:group ref=".[not(string(dcterms:title))]">
									<div class="alert alert-danger alert-box">
										<span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> Title is required. </div>
								</xforms:group>
								<xforms:group ref=".[not(string(dcterms:description)) and not(dcterms:description[@rdf:resource castable as xs:anyURI])]">
									<div class="alert alert-danger alert-box">
										<span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> Description is required. </div>
								</xforms:group>
								<xforms:group ref=".[not(string(dcterms:publisher)) and not(dcterms:publisher[@rdf:resource castable as xs:anyURI])]">
									<div class="alert alert-danger alert-box">
										<span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> Publisher is required. </div>
								</xforms:group>
								<xforms:group ref=".[not(dcterms:license[@rdf:resource castable as xs:anyURI])]">
									<div class="alert alert-danger alert-box">
										<span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> License or rights statement is required. </div>
								</xforms:group>
								
								
								<div>
									<xforms:input ref="@rdf:about">
										<xforms:label>Dataset URI</xforms:label>
									</xforms:input>
								</div>
								<div>
									<xforms:input ref="void:dataDump/@rdf:resource">
										<xforms:label>Harvest URL</xforms:label>
									</xforms:input>
								</div>
								<xforms:trigger>
									<xforms:label>Begin Harvest</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<xforms:send submission="load-json"/>
										
										<!-- after the completion of the request, initiate SPARQL publication -->
										<!--<xforms:send submission="post-dump"/>
										<xforms:action ev:event="xforms-submit-done">
											<xforms:send submission="post-void"/>
										</xforms:action>-->
										
										<!-- refresh page after dumps have been posted -->
										<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
										<xforms:send submission="submit-sparqlQuery"/>
										<xforms:delete nodeset="instance('datasets')/*"/>
										<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
										<xforms:toggle case="default"/>
									</xforms:action>
								</xforms:trigger>
							</xforms:group>
						</xforms:case>
						<xforms:case id="validate-void">
							<xforms:group ref="instance('void-rdf')">
								<xforms:group ref="void:Dataset[@rdf:about]">
									<!-- display error messages for missing fields -->
									<!--<xforms:group ref=".[not(string(dcterms:title))]">
										<div class="alert alert-danger alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Title is required. </div>
									</xforms:group>
									<xforms:group ref=".[not(string(dcterms:description)) and not(dcterms:description[@rdf:resource castable as xs:anyURI])]">
										<div class="alert alert-danger alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Description is required. </div>
									</xforms:group>
									<xforms:group ref=".[not(string(dcterms:publisher)) and not(dcterms:publisher[@rdf:resource castable as xs:anyURI])]">
										<div class="alert alert-danger alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> Publisher is required. </div>
									</xforms:group>
									<xforms:group ref=".[not(dcterms:license[@rdf:resource castable as xs:anyURI])]">
										<div class="alert alert-danger alert-box">
											<span class="glyphicon glyphicon-exclamation-sign"></span>
											<strong>Alert:</strong> License or rights statement is required. </div>
									</xforms:group>-->
									
									<div>
										<xforms:output ref="@rdf:about">
											<xforms:label>URI</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:output>
									</div>
									<xforms:repeat nodeset="dcterms:title">
										<div>
											<xforms:output ref=".">
												<xforms:label>Title</xforms:label>
											</xforms:output>
											<xforms:group ref="@lang">
												<xforms:output value="concat('(', ., ')')"/>
											</xforms:group>
										</div>
									</xforms:repeat>
									<xforms:repeat nodeset="dcterms:description">
										<div>
											<xforms:output value="if (@rdf:resource) then @rdf:resource else .">
												<xforms:label>Description</xforms:label>
												<xforms:alert>test</xforms:alert>
											</xforms:output>
											<xforms:group ref="@lang">
												<xforms:output value="concat('(', ., ')')"/>
											</xforms:group>
										</div>
									</xforms:repeat>
									<xforms:group ref="dcterms:publisher">
										<div>
											<xforms:output value="if (@rdf:resource) then @rdf:resource else .">
												<xforms:label>Publisher</xforms:label>
											</xforms:output>
										</div>
									</xforms:group>
									<xforms:group ref="dcterms:license">
										<div>
											<xforms:output value="if (@rdf:resource) then @rdf:resource else .">
												<xforms:label>License</xforms:label>
											</xforms:output>
										</div>
									</xforms:group>
									<!-- the validate trigger is only enabled when the VoID RDF metadata conforms to basic requirements -->
									<xforms:trigger bind="validate-trigger">
										<xforms:label><span class="glyphicon glyphicon-check"></span>Validate</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xforms:message level="modal">test</xforms:message>
										</xforms:action>
									</xforms:trigger>
									<xforms:trigger>
										<xforms:label><span class="glyphicon glyphicon-upload"></span> Import</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- push VoID RDF into triplestore -->
											<xforms:send submission="post-void"/>
											<xforms:action ev:event="xforms-submit-done">
												<xforms:action xxforms:iterate="instance('void-rdf')/void:Dataset/void:dataDump">
													<xforms:setvalue ref="instance('control-instance')/dump_uri" value="context()/@rdf:resource"/>
													<xforms:send submission="load-dump"/>
													<xforms:action ev:event="xforms-submit-done">
														<xforms:send submission="post-dump"/>
													</xforms:action>
												</xforms:action>

												<!-- refresh page after dumps have been posted -->
												<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
												<xforms:send submission="submit-sparqlQuery"/>
												<xforms:delete nodeset="instance('datasets')/*"/>
												<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
												<xforms:toggle case="default"/>
											</xforms:action>
										</xforms:action>
									</xforms:trigger>
								</xforms:group>
								<!-- if there is not a void:Dataset child and/or there is no URI for the Dataset, then validation fails outright -->
								<xforms:group ref=".[not(void:Dataset[@rdf:about])]">
									<div class="bg-danger alert-box"><span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> No void:Dataset object or missing dataset URI.</div>
									<xforms:trigger>
										<xforms:label><span class="glyphicon glyphicon-arrow-left"></span> Back</xforms:label>
										<xforms:toggle case="default" ev:event="DOMActivate"/>
									</xforms:trigger>
								</xforms:group>
							</xforms:group>
						</xforms:case>
					</xforms:switch>
					<fr:xforms-inspector/>
				</div>
			</div>
		</div>
		<!-- *********** DIALOGS *********** -->
		<!-- this is the dialog for looking up a VoID RDF metadata object -->
		<xxforms:dialog id="lookup-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Load VoID RDF</xforms:label>
			<p>Insert the URI for VoID metadata RDF.</p>
			<div>
				<xforms:input ref="instance('control-instance')/void_uri"/>
				<xforms:trigger>
					<xforms:label>Load</xforms:label>
					<!-- delete current options in the instance and initiate new query -->
					<xforms:action ev:event="DOMActivate">
						<xforms:send submission="load-void"/>
						<xforms:action ev:event="xforms-submit-done">
							<xforms:toggle case="validate-void"/>
							<xforms:setvalue ref="instance('control-instance')/validate-trigger" value="true()" if="xxforms:valid(instance('void-rdf'), true())"
							/>
						</xforms:action>
						<xxforms:hide dialog="lookup-dialog"/>
					</xforms:action>
				</xforms:trigger>
			</div>
		</xxforms:dialog>
		<!-- dialog to confirm deletion of a void:Dataset and associated objects -->
		<fr:alert-dialog id="delete-dataset-dialog">
			<fr:label>Delete Dataset</fr:label>
			<fr:message>Are you sure you want to remove this dataset from the Kerameikos.org SPARQL endpoint?</fr:message>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<!-- first delete the objects associated with the dataset, linked by void:inDataset -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-template')/query[@id='delete-dump'], 'DATASET', instance('control-instance')/dataset)"/>
					<xforms:send submission="delete-graph"/>
					<!-- then delete the void:Dataset object -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-template')/query[@id='delete-metadata'], 'DATASET', instance('control-instance')/dataset)"/>
					<xforms:send submission="delete-graph"/>
					<!-- resubmit SPARQL query for void:Datasets to reset the table -->
					<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
					<xforms:send submission="submit-sparqlQuery"/>
					<xforms:delete nodeset="instance('datasets')/*"/>
					<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
				</xforms:action>
			</fr:positive-choice>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
		</fr:alert-dialog>
		<fr:alert-dialog id="refresh-dataset-dialog">
			<fr:label>Refresh Dataset</fr:label>
			<fr:message>Refreshing the dataset may take several minutes. Continue?</fr:message>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<!-- first delete the objects associated with the dataset, linked by void:inDataset -->
					<xforms:setvalue ref="instance('sparqlUpdate')"
						value="replace(instance('sparqlUpdate-template')/query[@id='delete-dump'], 'DATASET', instance('control-instance')/dataset)"/>
					<xforms:send submission="delete-graph"/>
					<!-- then fetch the new data dump -->
					<xforms:action ev:event="xforms-submit-done">
						<xforms:action xxforms:iterate="instance('sparqlResponse')//void:Dataset[@rdf:about=instance('control-instance')/dataset]/void:dataDump">
							<xforms:setvalue ref="instance('control-instance')/dump_uri" value="context()/@rdf:resource"/>
							<xforms:send submission="load-dump"/>
							<xforms:send submission="post-dump" ev:event="xforms-submit-done"/>
						</xforms:action>
						<!-- resubmit SPARQL query for void:Datasets to reset the table -->
						<xforms:setvalue ref="instance('sparqlQuery')" value="instance('sparql-templates')/query[@id='get-datasets']"/>
						<xforms:send submission="submit-sparqlQuery"/>
						<xforms:delete nodeset="instance('datasets')/*"/>
						<xforms:insert context="instance('datasets')" origin="instance('sparqlResponse')/*"/>
					</xforms:action>
				</xforms:action>
			</fr:positive-choice>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
		</fr:alert-dialog>
	</body>
</html>
